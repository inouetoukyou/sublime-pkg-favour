{
	"scope": "source.pascal",
	"completions":
	[
		"pascal",

		{ "trigger": "uses", "contents": "uses" },		
		{ "trigger": "forward", "contents": "forward;" },		
		{ "trigger": "external", "contents": "external;" },	
		{ "trigger": "const", "contents": "const" },
		{ "trigger": "exit", "contents": "exit($1);" },
		{ "trigger": "exit;", "contents": "exit;" },

		{ "trigger": "Byte", "contents": "Byte" },
		{ "trigger": "Shortint", "contents": "Shortint" },
		{ "trigger": "Smallint", "contents": "Smallint" },
		{ "trigger": "Word", "contents": "Word" },
		{ "trigger": "Integer", "contents": "Integer" },
		{ "trigger": "Cardinal", "contents": "Cardinal" },
		{ "trigger": "Longint", "contents": "Longint" },
		{ "trigger": "Longword", "contents": "Longword" },
		{ "trigger": "Int64", "contents": "Int64" },
		{ "trigger": "QWord", "contents": "QWord" },
		{ "trigger": "DWord", "contents": "DWord" },
		{ "trigger": "Real", "contents": "Real" },
		{ "trigger": "Single", "contents": "Single" },
		{ "trigger": "Double", "contents": "Double" },
		{ "trigger": "Extended", "contents": "Extended" },
		{ "trigger": "Comp", "contents": "Comp" },
		{ "trigger": "Currency", "contents": "Currency" },
		{ "trigger": "Boolean", "contents": "Boolean" },
		{ "trigger": "ByteBool", "contents": "ByteBool" },
		{ "trigger": "WordBool", "contents": "WordBool" },
		{ "trigger": "LongBool", "contents": "LongBool" },
		{ "trigger": "Char", "contents": "Char" },
		{ "trigger": "WideChar", "contents": "WideChar" },
		{ "trigger": "PChar", "contents": "PChar" },
		{ "trigger": "String", "contents": "String" },
		{ "trigger": "AnsiString", "contents": "AnsiString" },
		{ "trigger": "Variant", "contents": "Variant" },

		{ "trigger": "IOResult", "contents": "IOResult" },
		{ "trigger": "abs", "contents": "abs($1);" },
		{ "trigger": "append", "contents": "append(${0:file});" },
		{ "trigger": "arctan", "contents": "arctan($1);" },
		{ "trigger": "assign", "contents": "assign(${1:file}, '${2:input.txt}');" },
		{ "trigger": "BlockRead", "contents": "BlockRead(${1:file}, ${2:buf}, ${3:count}, ${4:result});" },
		{ "trigger": "BlockWrite", "contents": "BlockWrite(${1:file}, ${2:buf}, ${3:count}, ${4:result});" },
		{ "trigger": "chr", "contents": "chr($1);" },
		{ "trigger": "close", "contents": "close(${0:file});" },
		{ "trigger": "clrscr", "contents": "clrscr" },
		{ "trigger": "concat", "contents": "concat($1);" },
		{ "trigger": "copy", "contents": "copy(${1:str}, ${2:pos}, ${3:n});" },
		{ "trigger": "cos", "contents": "cos($1);" },
		{ "trigger": "dec", "contents": "dec($1);" },
		{ "trigger": "delete", "contents": "delete(${1:str}, ${2:pos}, ${3:n});" },
		{ "trigger": "eof", "contents": "eof(${0:file});" },
		{ "trigger": "eoln", "contents": "eoln(${0:file});" },
		{ "trigger": "erase", "contents": "erase(${0:file});" },
		{ "trigger": "exp", "contents": "exp(${1:n} * ln(${2:x}););" },
		{ "trigger": "filePos", "contents": "filePos(${0:file});" },
		{ "trigger": "fileSize", "contents": "fileSize(${0:file});" },
		{ "trigger": "fillChar", "contents": "fillChar($1, $2, $3);" },
		{ "trigger": "flush", "contents": "flush(${0:file});" },
		{ "trigger": "frac", "contents": "frac($1);" },
		{ "trigger": "gotoxy", "contents": "gotoxy(${1:x}, ${2:y});" },
		{ "trigger": "inc", "contents": "inc($1);" },
		{ "trigger": "insert", "contents": "insert(${1:sub_str}, ${2:str}, ${3:pos});" },
		{ "trigger": "int", "contents": "int($1);" },
		{ "trigger": "Length", "contents": "Length($1);" },
		{ "trigger": "ln", "contents": "ln($1);" },
		{ "trigger": "lowercase", "contents": "lowercase($1);" },
		{ "trigger": "odd", "contents": "odd($1);" },
		{ "trigger": "ord", "contents": "ord($1);" },
		{ "trigger": "3.141593...", "contents": "pi" },
		{ "trigger": "pos", "contents": "pos(${1:sub_str}, ${2:str});" },
		{ "trigger": "pred", "contents": "pred($1);" },
		{ "trigger": "random", "contents": "random($1);" },
		{ "trigger": "randomize", "contents": "randomize" },
		{ "trigger": "read", "contents": "read${1:ln}(${2:statement});" },
		{ "trigger": "readln;", "contents": "readln;" },
		{ "trigger": "writeln;", "contents": "writeln;" },
		{ "trigger": "readkey", "contents": "readkey($1);" },
		{ "trigger": "rename", "contents": "rename(${1:file}, ${2:new_name});" },
		{ "trigger": "reset", "contents": "reset(${0:file});" },
		{ "trigger": "rewrite", "contents": "rewrite(${0:file});" },
		{ "trigger": "round", "contents": "round($1);" },
		{ "trigger": "seekEOF", "contents": "seekEOF(${0:file});" },
		{ "trigger": "seekEOLn", "contents": "seekEOLn(${0:file});" },
		{ "trigger": "setTextBuf", "contents": "SetLength(${1:array}, ${2:n});" },
		{ "trigger": "setTextBuf", "contents": "setTextBuf(${1:file}, ${2:buf});" },
		{ "trigger": "sizeof", "contents": "sizeof($0)" },
		{ "trigger": "sin", "contents": "sin($1);" },
		{ "trigger": "sqr", "contents": "sqr($1);" },
		{ "trigger": "sqrt", "contents": "sqrt($1);" },
		{ "trigger": "str", "contents": "str(${1:n}, ${2:str});" },
		{ "trigger": "succ", "contents": "succ($1);" },
		{ "trigger": "textbackground", "contents": "textbackground($1);" },
		{ "trigger": "textcolor", "contents": "textcolor($1);" },
		{ "trigger": "trunc", "contents": "trunc($1);" },
		{ "trigger": "truncate", "contents": "truncate(${0:file});" },
		{ "trigger": "upcase", "contents": "upcase($1);" },
		{ "trigger": "val", "contents": "val(${1:str}, ${2:n}, ${3:error});" },
		{ "trigger": "write", "contents": "write${1:ln}(${2:statement});" },
		{ "trigger": "with", "contents": "with $1 do${0: }" },
		//{ "trigger": "with", "contents": "with $1 do\nbegin\n\t${2}\nend;" }
		{ "trigger": "array", "contents": " array[${1:0}..$2] of ${3:Longint};" }
		
	]
}
